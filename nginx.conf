worker_processes  auto;
error_log /dev/stdout debug;

events {
	worker_connections 2048;
}

env DOCKER_DOMAIN;

http {
	include                /usr/local/openresty/nginx/conf/mime.types;
	default_type           text/html;

	upstream api {
		ip_hash;
		server api;
	}

	upstream events {
		ip_hash;
		server events:8000;
	}

	server {

		listen 80;
		server_name _;
		ssl off;

		# set client body size to 30M #
		client_max_body_size 30M;
		client_body_buffer_size 10M;
		large_client_header_buffers 4 32k;

		server_tokens off;

		location /static {
			alias /srv/app/static;
		}

		location  ~* "/(?<namespace>[\w-]+)/projects/(?<projectId>[\w-]+)/servers/(?<serverId>[\w-]+)/ips/(?<service>[a-z]+)/$" {
			set $target "";
			internal;
			default_type 'text/plain';
			proxy_pass http://api;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header Host $host;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			set $url_ips '/$namespace/projects/$projectId/servers/$serverId/internal/';
			content_by_lua_block {
				ngx.req.set_header("Accept", "application/json")
				local res = ngx.location.capture(ngx.var.url_ips)
				local cjson = require "cjson"
				local value = cjson.decode(res.body)
				if res.status ~= 200 then
					ngx.status = res.status
					ngx.exit(ngx.HTTP_OK)
				else
					ngx.print(value.server[ngx.var.service])
				end
			}
		}

		location  ~* "/(?<namespace>[\w-]+)/projects/(?<projectId>[\w-]+)/servers/(?<serverId>[\w-]+)/containerName/$" {
			set $target "";
			internal;
			default_type 'text/plain';
			proxy_pass http://api;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header Host $host;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			set $url_ips '/$namespace/projects/$projectId/servers/$serverId/internal/';
			content_by_lua_block {
				ngx.req.set_header("Accept", "application/json")
				local res = ngx.location.capture(ngx.var.url_ips)
				local cjson = require "cjson"
				local value = cjson.decode(res.body)
				if res.status ~= 200 then
					ngx.status = res.status
					ngx.exit(ngx.HTTP_OK)
				else
					ngx.print(value.container_name)
				end
			}
		}

		location ~* "/(?<namespace>[\w-]+)/projects/(?<projectId>[\w-]+)/servers/(?<serverId>[\w-]+)/logs/$" {
			set_by_lua $docker_host 'return os.getenv("DOCKER_DOMAIN")';
			set $container "";
			set $url_ips '/$namespace/projects/$projectId/servers/$serverId/containerName/';
			rewrite_by_lua_block {
				local res = ngx.location.capture(ngx.var.url_ips)
				ngx.var.container = res.body
			}
			proxy_pass http://$docker_host/v1.29/containers/$container/attach/ws?logs=1&stream=1&stdout=1&stderr=1;
			proxy_redirect off;
			proxy_buffering off;
			proxy_buffer_size  16k;
			proxy_buffers 16  16k;

			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection "Upgrade";

			proxy_cache_bypass 1;
			proxy_no_cache 1;
		}

		location ~* "/(?<namespace>[\w-]+)/projects/(?<projectId>[\w-]+)/servers/(?<serverId>[\w-]+)/status/$" {
			set $container "";
			set $url_ips '/$namespace/projects/$projectId/servers/$serverId/containerName/';
			rewrite_by_lua_block {
				local res = ngx.location.capture(ngx.var.url_ips)
				ngx.var.container = res.body
			}
			proxy_pass http://events/$container;
			proxy_redirect off;
			proxy_buffering off;
			proxy_buffer_size  16k;
			proxy_buffers 16  16k;

			proxy_set_header Host $host;

			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection "Upgrade";

			proxy_cache_bypass 1;
			proxy_no_cache 1;
		}

		location ~* "/(?<namespace>[\w-]+)/projects/(?<projectId>[\w-]+)/servers/(?<serverId>[\w-]+)/endpoint/(?<service>[a-z]+)(?<path>.+)$" {
			sub_filter '"/' '"/$namespace/projects/$projectId/servers/$serverId/endpoint/$service/';
			sub_filter "'/" "'/$namespace/projects/$projectId/servers/$serverId/endpoint/$service/";
			sub_filter_once off;
			proxy_ignore_client_abort off;
			default_type 'text/plain';
			set $url_ips '/$namespace/projects/$projectId/servers/$serverId/ips/$service/';
			set $server "";
			rewrite_by_lua_block {
				local res = ngx.location.capture(ngx.var.url_ips)
				if res.status == 404 then
					if ngx.var.serverType == 'model' then
						local cjson = require "cjson"
						local response = {
							schema_version = "0.1",
							model_version = "1.0",
							timestamp = os.date("%Y-%m-%dT%TZ", os.time()),
							status = "error",
							reason = "model does not exist or is not running"
						}
						local resp_text = cjson.encode(response)
						ngx.header['content-type'] = 'application/json; charset=utf-8'
						ngx.status = 404
						ngx.print(resp_text)
						ngx.exit(ngx.HTTP_OK)
					else
						ngx.status = 404
						ngx.exit(ngx.HTTP_OK)
					end
				else
					ngx.var.server = res.body
				end
			}
			proxy_pass http://$server$path;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header Host $http_host;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-NginX-Proxy true;
			proxy_set_header Origin "";

			# WebSocket support
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection "upgrade";
			proxy_read_timeout 186400;
		}

		location / {
			proxy_connect_timeout       1200;
			proxy_send_timeout          1200;
			proxy_read_timeout          1200;
			send_timeout                1200;

			proxy_set_header X-Forwarded-Proto $scheme;
			proxy_set_header X-Forwarded-Host $http_host;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_pass http://api/;
		}

	}
}
